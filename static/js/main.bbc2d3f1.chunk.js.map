{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","className","href","TodoInfo","title","completed","user","TodoList","todos","map","todo","getUserById","userId","usersFromServer","find","preparedTodos","App","useState","setTodos","hasError","setHasError","values","setValues","createNewId","allId","Math","max","action","method","onSubmit","e","preventDefault","newTodo","prev","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbc2d3f1.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport './UserInfo.scss';\n\ntype Props = {\n  name: string;\n  email: string;\n};\n\nexport const UserInfo: React.FC<Props> = ({ name, email }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import React from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types';\nimport './TodoInfo.scss';\n\nexport const TodoInfo: React.FC<Todo> = ({\n  title,\n  id,\n  completed,\n  user,\n}) => (\n  <article\n    data-id={id}\n    className={completed\n      ? 'TodoInfo TodoInfo--completed'\n      : 'TodoInfo'}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {title}\n    </h2>\n\n    <UserInfo\n      name={user.name}\n      email={user.email}\n    />\n  </article>\n);\n","import React from 'react';\nimport { Todo } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        id={todo.id}\n        title={todo.title}\n        completed={todo.completed}\n        user={todo.user}\n      />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types';\n\nconst getUserById = (userId: number) => {\n  return usersFromServer.find(user => user.id === userId)\n  || usersFromServer;\n};\n\nconst preparedTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId) as User,\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(preparedTodos);\n  const [hasError, setHasError] = useState({ title: false, userId: false });\n  const [values, setValues] = useState({\n    title: '',\n    userId: 0,\n  });\n\n  const { title, userId } = values;\n\n  const createNewId = () => {\n    const allId = todos.map(todo => todo.id);\n\n    return Math.max(...allId) + 1;\n  };\n\n  const handleTitleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({ ...values, title: e.target.value });\n\n    setHasError({ ...hasError, title: false });\n  };\n\n  const handleUserIdSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setValues({ ...values, userId: +e.target.value });\n\n    setHasError({ ...hasError, userId: false });\n  };\n\n  const reset = () => {\n    setHasError({ title: false, userId: false });\n\n    setValues({\n      title: '',\n      userId: 0,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (title === '' && userId === 0) {\n      setHasError({ title: true, userId: true });\n\n      return;\n    }\n\n    if (title === '') {\n      setHasError({ ...hasError, title: true });\n\n      return;\n    }\n\n    if (userId === 0) {\n      setHasError({ ...hasError, userId: true });\n\n      return;\n    }\n\n    const newTodo = {\n      id: createNewId(),\n      title,\n      userId,\n      completed: false,\n      user: getUserById(userId) as User,\n    };\n\n    reset();\n\n    setTodos(prev => [...prev, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={handleTitleInput}\n          />\n\n          {hasError.title\n            && (<span className=\"error\">Please enter a title</span>) }\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserIdSelect}\n          >\n            <option value=\"0\">Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n\n          {hasError.userId\n           && <span className=\"error\">Please choose a user</span>}\n\n        </div>\n\n        <button\n          type=\"submit\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={todos}\n      />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}